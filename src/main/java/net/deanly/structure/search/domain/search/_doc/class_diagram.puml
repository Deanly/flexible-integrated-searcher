@startuml

/' SearchProduct
 - Core Domain
'/
class Search<<Core>> {
    + policy: SearchPolicy
    + serviceProvider: QueryServiceProvider
    - translator: ConditionTranslator
    - queryWorker: SearchQueryWorker
    + query(SearchCondition) -> SearchAnswer<T>
}

/' SearchCondition
 - 검색 도메인 가시화
 - 검색 조건 정의
 - 버전 관리
'/
interface SearchCondition {
    + columns() -> SearchColumn<?>[]
    + requiredColumns() -> ColumnTypeGroup[]
    + getPageable() -> Pageable
}

class ColumnTypeGroup {
    + types: ColumnType[]
}

interface SearchColumn<T> {
    + type() -> ColumnType
    + rawValue() -> T
    + operator() -> SearchOperator
    + readableQueryApis() -> QueryApiType[]
}

enum ColumnType {
    { customized }
}

enum SearchOperator {
    : AND
    : OR
}


class SearchAnswer<T> {
    + conditions: SearchCondition
    + values: Page<SearchAnswerItem<T>>
}

class SearchAnswerItem<T> {
    + identifier: T
    + idType: SearchColumnType
    + references: Map<SearchColumnType, Object>
}


/' ConditionTranslator

validation
 - 필수 값 검사, 실패시 예외 InvalidConditionException.
 - QueryAPIProvider 지원 여부 검사, 실패시 예외 InvalidConditionException.

translation by SearchPolicy
 1. Or/And 그룹화.
 2. PriorityQueryByColumn

'/

class ConditionTranslator {
    + translate(QueryServiceType, SearchPolicy, SearchCondition) \n  -> QueryCoordinator[]
}

class InvalidConditionException


/' SearchPolicyProvider
'/
interface SearchPolicy {
    + prioritiesQueryByColumn: [PriorityQueryByColumn]
}

class PriorityQueryByColumn {
    + ColumnType: ColumnType
    + priorityQueryType: PriorityQueryType
    + query
}

enum PriorityQueryType {
: ALWAYS // 항상사용
: PREFER // 우선사용
: AVOID // 회피
}


class QueryWorkerException

/' SearchQueryWorker
'/
class SearchQueryWorker {
    + <T> parallels(QueryServiceType, QueryCoordinator[]) -> List<SearchAnswerItem<T>>
    + <T> stream(QueryServiceType, QueryCoordinator[]) -> List<SearchAnswerItem<T>>
    + <T> stream(QueryServiceType, QueryCoordinator) -> List<SearchAnswerItem<T>>
    + <T> waterfall(QueryServiceType, QueryCoordinator[]) -> List<SearchAnswerItem<T>>
    + <T> blockPage(QueryServiceType, QueryCoordinator[]) -> Page<SearchAnswerItem<T>>
}

/' QueryCoordinator
'/
abstract QueryCoordinator {
    # conditions: SearchColumn<?>[]
    # references: ColumnType[]
    # pageable: Pageable
    + isStandard: boolean
    + infraType() -> QueryServiceType
    + query(SearchInfraInterface) -> List<SearchResultItem<?>>
}

class QueryCoordinatorFactory {
    + getInstance(QueryServiceType, SearchColumn<?>[], \n\tSearchColumnType[], boolean, Pageable) -> QueryCoordinator
}

/' QueryServiceInterface
 - 기본 순서는 QueryServiceProvider 에 정의된 순서.
'/
interface QueryServiceInterface<T> {
    + type() -> QueryServiceType
    + search(SearchColumn<?>[], Pageable) -> Page<T>
    + identifier() -> ColumnType
    + references() -> ColumnType[]
}

interface QueryServiceProvider {
    + access(QueryServiceType) -> QueryServiceInterface
    + defaultPriority() -> QueryServiceType[]
}

enum QueryServiceType {
{ customized }
}


Search .> SearchAnswer
Search *-- SearchQueryWorker
Search *-- ConditionTranslator
Search o--- QueryServiceProvider
Search o--- SearchPolicy

SearchCondition "1" -- "0.." SearchColumn
SearchCondition <. Search
SearchCondition .> ColumnTypeGroup

SearchColumn . ColumnType
SearchColumn .. SearchOperator

ColumnTypeGroup ..> ColumnType

QueryServiceProvider "1" ..> "0.." QueryServiceInterface
QueryServiceProvider . QueryServiceType

SearchPolicy ..> PriorityQueryByColumn

PriorityQueryByColumn ..> PriorityQueryType

ConditionTranslator ..> SearchPolicy

SearchQueryWorker ..> QueryServiceProvider
SearchQueryWorker . QueryWorkerException

QueryCoordinator <. QueryCoordinatorFactory

QueryCoordinator <.. SearchQueryWorker

ConditionTranslator ..> QueryCoordinator
ConditionTranslator . InvalidConditionException

SearchAnswer "1" -- "0.." SearchAnswerItem

@enduml