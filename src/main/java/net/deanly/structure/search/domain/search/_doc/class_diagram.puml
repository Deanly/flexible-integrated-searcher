@startuml

/' SearchProduct
 - Core Domain
'/
abstract Search<T><<Core>> {
    + policy: ISearchPolicy
    + serviceProvider: IQueryServiceProvider
    - translator: ConditionTranslator
    - queryWorker: SearchQueryWorker

    + getIdentifierType() -> java.lang.reflect.Type (of generic T)
    + search(ISearchCondition) -> SearchAnswer<T>
}

/' ISearchCondition
 - 검색 도메인 가시화
 - 검색 조건 정의
 - 버전 관리
'/
interface ISearchCondition {
    + columns() -> ISearchColumn<?>[]
    + requiredColumnGrouping() -> ColumnTypeGroup[]
    + getPageable() -> Pageable
}

class ColumnTypeGroup {
    + types: ColumnType[]
}

interface ISearchColumn<T> {
    + type() -> ColumnType
    + rawKey(QueryServiceType) -> String
    + rawValue() -> T
    + operator() -> SearchOperator
    + readableQueryServices() -> QueryServiceType[]
}

enum ColumnType {
    - type: java.lang.reflect.Type

    { customized }

    + getType() -> java.lang.reflect.Type
}

enum SearchOperator {
    : AND
    : OR
}

class SearchAnswer<T> {
    + conditions: ISearchCondition
    + values: Page<SearchAnswerItem<T>>
}

class SearchAnswerItem<T> {
    + identifier: T
    + idType: ColumnType
    + references: Map<ColumnType, Object>
}

class ConditionTranslator {
    + translate(ISearchPolicy, ISearchCondition) \n  -> QueryCoordinator[]
}

class InvalidConditionException


/' ISearchPolicyProvider
'/
interface ISearchPolicy {
    + prioritiesQueryByColumn: [PriorityQueryByColumn]
}

class PriorityQueryByColumn {
    + ColumnType: ColumnType
    + priorityQueryType: PriorityQueryType
    + queryServiceType: QueryServiceType
}

enum PriorityQueryType {
: ALWAYS // 항상사용
: PREFER // 우선사용
: AVOID // 회피
}


class NoQueryServiceException

/' SearchQueryWorker
'/
class SearchQueryWorker {
    + <T> blockQueryPage(Type, IQueryServiceProvider, QueryCoordinator) -> Page<SearchAnswerItem<T>>
    + <T> parallelsQueryPage(Type, IQueryServiceProvider, QueryCoordinator[]) -> Page<SearchAnswerItem<T>>
    + <T> waterfallQueryPage(Type, IQueryServiceProvider, QueryCoordinator[]) -> Page<SearchAnswerItem<T>>
}

/' QueryCoordinator
'/
abstract QueryCoordinator {
    # conditions: ISearchColumn<?>[]
    # references: ColumnType[]
    # pageable: Pageable
    + isStandard: boolean
    + infraType() -> QueryServiceType
    + query(SearchInfraInterface) -> List<SearchResultItem<?>>
}

/' IQueryService
 - 기본 순서는 IQueryServiceProvider 에 정의된 순서.
'/
interface IQueryService<T> {
    + type() -> QueryServiceType
    + search(ISearchColumn<?>[], Pageable) -> Page<SearchAnswerItem<T>>
    + identifier() -> ColumnType
    + references() -> ColumnType[]
}

interface IQueryServiceProvider {
    + access(ColumnType, QueryServiceType) -> IQueryService
}

enum QueryServiceType {
{ customized }
}


Search .> SearchAnswer
Search *-- SearchQueryWorker
Search *-- ConditionTranslator
Search o--- IQueryServiceProvider
Search o--- ISearchPolicy

ISearchCondition "1" -- "0.." ISearchColumn
ISearchCondition <. Search
ISearchCondition .> ColumnTypeGroup

ISearchColumn . ColumnType
ISearchColumn .. SearchOperator

ColumnTypeGroup ..> ColumnType

IQueryServiceProvider "1" ..> "0.." IQueryService

IQueryService . QueryServiceType

ISearchPolicy ..> PriorityQueryByColumn

PriorityQueryByColumn ..> PriorityQueryType

ConditionTranslator ..> ISearchPolicy

SearchQueryWorker ..> IQueryServiceProvider
SearchQueryWorker . NoQueryServiceException

QueryCoordinator <.. SearchQueryWorker

ConditionTranslator ..> QueryCoordinator
ConditionTranslator . InvalidConditionException

SearchAnswer "1" -- "0.." SearchAnswerItem

@enduml